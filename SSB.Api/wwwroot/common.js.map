{"version":3,"sources":["webpack:///./node_modules/rxjs-compat/_esm5/add/observable/forkJoin.js","webpack:///./node_modules/rxjs-compat/_esm5/add/observable/of.js","webpack:///./node_modules/rxjs-compat/_esm5/add/operator/debounceTime.js","webpack:///./node_modules/rxjs-compat/_esm5/add/operator/distinctUntilChanged.js","webpack:///./node_modules/rxjs-compat/_esm5/operator/debounceTime.js","webpack:///./node_modules/rxjs-compat/_esm5/operator/distinctUntilChanged.js","webpack:///./src/@fuse/validators/generic-validator.ts"],"names":[],"mappings":"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","file":"common.js","sourcesContent":["import { Observable, forkJoin as staticForkJoin } from 'rxjs';\nObservable.forkJoin = staticForkJoin;\n//# sourceMappingURL=forkJoin.js.map","import { Observable, of as staticOf } from 'rxjs';\nObservable.of = staticOf;\n//# sourceMappingURL=of.js.map","import { Observable } from 'rxjs';\nimport { debounceTime } from '../../operator/debounceTime';\nObservable.prototype.debounceTime = debounceTime;\n//# sourceMappingURL=debounceTime.js.map","import { Observable } from 'rxjs';\nimport { distinctUntilChanged } from '../../operator/distinctUntilChanged';\nObservable.prototype.distinctUntilChanged = distinctUntilChanged;\n//# sourceMappingURL=distinctUntilChanged.js.map","import { asyncScheduler } from 'rxjs';\nimport { debounceTime as higherOrder } from 'rxjs/operators';\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=asyncScheduler] The {@link SchedulerLike} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime(dueTime, scheduler) {\n    if (scheduler === void 0) { scheduler = asyncScheduler; }\n    return higherOrder(dueTime, scheduler)(this);\n}\n//# sourceMappingURL=debounceTime.js.map","import { distinctUntilChanged as higherOrder } from 'rxjs/operators';\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged(compare, keySelector) {\n    return higherOrder(compare, keySelector)(this);\n}\n//# sourceMappingURL=distinctUntilChanged.js.map","import { FormGroup } from '@angular/forms';\r\n\r\n// Generic validator for Reactive forms\r\n// Implemented as a class, not a service, so it can retain state for multiple forms.\r\nexport class GenericValidator {\r\n\r\n    // Provide the set of valid validation messages\r\n    // Stucture:\r\n    // controlName1: {\r\n    //     validationRuleName1: 'Validation Message.',\r\n    //     validationRuleName2: 'Validation Message.'\r\n    // },\r\n    // controlName2: {\r\n    //     validationRuleName1: 'Validation Message.',\r\n    //     validationRuleName2: 'Validation Message.'\r\n    // }\r\n    constructor(private validationMessages: { [key: string]: { [key: string]: string } }) { }\r\n\r\n    // Processes each control within a FormGroup\r\n    // And returns a set of validation messages to display\r\n    // Structure\r\n    // controlName1: 'Validation Message.',\r\n    // controlName2: 'Validation Message.'\r\n    public processMessages(container: FormGroup, kosulsuzGoster: boolean = false): { [key: string]: string } {\r\n        const messages: any = {};\r\n        for (const controlKey in container.controls) {\r\n            if (container.controls.hasOwnProperty(controlKey)) {\r\n                const c = container.controls[controlKey];\r\n                // If it is a FormGroup, process its child controls.\r\n                if (c instanceof FormGroup) {\r\n                    const childMessages = this.processMessages(c);\r\n                    Object.assign(messages, childMessages);\r\n                }\r\n                // Only validate if there are validation messages for the control\r\n                if (this.validationMessages[controlKey]) {\r\n                    messages[controlKey] = '';\r\n                    if ((c.dirty || c.touched || kosulsuzGoster) && c.errors) {\r\n                        Object.keys(c.errors).map(messageKey => {\r\n                            if (this.validationMessages[controlKey][messageKey]) {\r\n                                messages[controlKey] += this.validationMessages[controlKey][messageKey] + ' ';\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n        return messages;\r\n    }\r\n}\r\n"],"sourceRoot":""}